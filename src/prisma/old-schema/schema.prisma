// This is your Prisma schema file for the old database schema
datasource db {
    provider = "postgresql"
    url      = env("OLD_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../../../node_modules/@prisma/old-client"
}

// User model to manage API keys
model User {
    id        String    @id @default(uuid())
    email     String    @unique
    name      String?
    apiKeys   ApiKey[]
    // leads     Leads[]   @relation("CreatedByUser")
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    isDeleted Boolean   @default(false)
    deletedAt DateTime?

    @@map("users")
}

// ApiKey model to store Apollo.io API keys & track credit usage
model ApiKey {
    id          String  @id @default(uuid())
    key         String  @unique
    name        String  @unique
    nickname    String
    description String?
    user        User?   @relation(fields: [userId], references: [id])
    userId      String?

    // Credit limits and thresholds
    creditLimit      Int?
    hardCreditLimit  Int  @default(10000) // Hard limit for total credits
    apiCreditLimit   Int  @default(5000) // Limit for regular API credits
    emailCreditLimit Int  @default(5000) // Limit for email export credits
    usageThreshold   Int  @default(90) // Usage threshold percentage

    // Usage tracking
    currentApiCredits   Int       @default(0) // Current API credits used
    currentEmailCredits Int       @default(0) // Current email export credits used
    creditPeriodStart   DateTime? // Start of current 24h credit period

    // Status flags
    isActive           Boolean @default(true)
    hourlyLimitReached Boolean @default(false)
    dailyLimitReached  Boolean @default(false)
    minuteLimitReached Boolean @default(false)
    creditsCompleted   Boolean @default(false)

    // Timing fields
    createdAt       DateTime  @default(now())
    updatedAt       DateTime? @updatedAt
    lastUsedAt      DateTime?
    expiresAt       DateTime?
    nextAvailableAt DateTime?

    // Relations
    usageMetrics    ApiUsage[]
    creditUsage     CreditUsage[] // New relation
    NotificationLog NotificationLog[]

    @@index([userId])
    @@map("api_keys")
}

// Notification Log
model NotificationLog {
    id        String   @id @default(uuid())
    apiKeyId  String
    threshold Int?
    sentAt    DateTime @default(now())
    apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])

    @@index([apiKeyId])
    @@index([sentAt])
    @@map("notification_logs")
}

// Model to track individual credit usage events
model CreditUsage {
    id       String @id @default(uuid())
    apiKey   ApiKey @relation(fields: [apiKeyId], references: [id])
    apiKeyId String

    creditType  CreditTypeEnum
    creditsUsed Int
    endpoint    String // The API endpoint that was called
    timestamp   DateTime       @default(now())

    @@index([apiKeyId])
    @@index([timestamp])
    @@map("credit_usage")
}

// ApiUsage model to track rate limits and usage
model ApiUsage {
    id        String   @id @default(uuid())
    apiKey    ApiKey   @relation(fields: [apiKeyId], references: [id])
    apiKeyId  String
    timestamp DateTime @default(now())

    // Daily metrics
    dailyRequestsLeft String?
    dailyUsage        String?
    dailyLimit        String?
    dailyUsagePercent Float? // New field

    // Hourly metrics
    hourlyRequestsLeft String?
    hourlyUsage        String?
    hourlyLimit        String?
    hourlyUsagePercent Float? // New field

    // Minute metrics
    minuteRequestsLeft String?
    minuteUsage        String?
    minuteLimit        String?
    minuteUsagePercent Float? // New field

    @@index([apiKeyId])
    @@index([timestamp])
    @@map("api_usage")
}

model Leads {
    id              String     @id @default(uuid())
    email           String     @unique
    company         Companies? @relation(fields: [companyId], references: [id])
    emailSent       Boolean    @default(false)
    emailOpened     Boolean    @default(false)
    companyId       String?
    createdBy       String?
    isPending       Boolean    @default(false)
    isProcessed     Boolean    @default(false)
    hasOrganization Boolean    @default(false)
    hasPositions    Boolean    @default(false)
    retryCount      Int        @default(0) // Add this field
    isStuck         Boolean    @default(false) // Add this field
    createdAt       DateTime   @default(now())
    updatedAt       DateTime?  @updatedAt
    isDeleted       Boolean    @default(false)
    deletedAt       DateTime?

    @@index([companyId])
    @@index([createdBy])
    @@map("leads")
}

model Companies {
    id             String      @id @default(uuid())
    organizationId String?
    domain         String      @unique
    careers_page   String?
    linkedin_url   String?
    company_size   Int?
    industry       String?
    raw_body       String?
    positions      Positions[]
    contacts       Contacts[]
    leads          Leads[]
    assignee       String?
    email_sent     Boolean     @default(false)
    createdAt      DateTime    @default(now())
    updatedAt      DateTime?   @updatedAt
    isDeleted      Boolean     @default(false)
    deletedAt      DateTime?

    @@map("companies")
}

model Positions {
    id              String                @id @default(uuid())
    apollo_id       String?               @unique
    position_title  String
    job_description String?
    link            String
    location        String?
    industry        String?
    salary_range    String?
    company         Companies?            @relation(fields: [companyId], references: [id])
    companyId       String?
    keywords        KeywordsOnPositions[]
    createdAt       DateTime              @default(now())
    updatedAt       DateTime?             @updatedAt
    isDeleted       Boolean               @default(false)
    deletedAt       DateTime?

    @@index([companyId])
    @@map("positions")
}

model Keywords {
    id        String                @id @default(uuid())
    name      String                @unique
    positions KeywordsOnPositions[]

    @@map("keywords")
}

model KeywordsOnPositions {
    position   Positions @relation(fields: [positionId], references: [id])
    positionId String
    keyword    Keywords  @relation(fields: [keywordId], references: [id])
    keywordId  String

    @@id([positionId, keywordId])
    @@map("keywords_on_positions")
}

model Contacts {
    id              String     @id @default(uuid())
    apollo_id       String     @unique
    first_name      String?
    last_name       String?
    full_name       String?
    linkedin_url    String?
    title           String?
    email_status    String?
    email           String?
    photo_url       String?
    organization_id String?
    state           String?
    city            String?
    country         String?
    departments     String[]
    subdepartments  String[]
    seniority       String?
    functions       String[]
    company         Companies? @relation(fields: [companyId], references: [id])
    raw_body        String
    companyId       String?
    createdAt       DateTime   @default(now())
    updatedAt       DateTime?  @updatedAt
    isDeleted       Boolean    @default(false)
    deletedAt       DateTime?

    @@index([companyId])
    @@map("contacts")
}

// Credit type enum
enum CreditTypeEnum {
    API
    EMAIL
}
